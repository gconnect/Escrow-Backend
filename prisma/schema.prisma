generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  ACTIVE
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum ServiceType {
  SOFTWARE_DEVELOPMENT
  CONTENT_WRITING
  DIGITAL_MARKETING
  PRODUCT_MANAGEMENT
  DATA_ANALYSIS
}

enum Sex {
  MALE
  FEMALE
  OTHERS
}

model UserEOAAccount {
  id                 Int     @id @default(autoincrement())
  eoaAddress         String
  privateKey         String
  smartWalletAddress String?
  userId             Int?    @unique
  user               User?   @relation(fields: [userId], references: [id], onDelete: Cascade) //deletes this table data alongside the user
}

model User {
  id                 Int             @id @default(autoincrement())
  username           String          @unique
  email              String           @unique
  password           String
  firstname          String?
  lastname           String?
  phone              String?
  sex                Sex?             
  address            String?
  eoaAccount         UserEOAAccount?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  clientRequests     Request[]       @relation("ClientRequests")
  freelancerRequests Request[]       @relation("FreelancerRequests")
}

model Milestone {
  id          Int           @id @default(autoincrement())
  title       String?
  description String
  percent     Int
  status      RequestStatus @default(PENDING)
  requestId   Int
  request     Request       @relation(fields: [requestId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Request {
  id                 Int           @id @default(autoincrement())
  serviceType        ServiceType   @default(SOFTWARE_DEVELOPMENT)
  projectDescription String
  additionalDocLinks String[]
  isMilestone        Boolean       @default(false)
  definitionOfDone   String
  revisions          Int
  amount             Float
  completionDate     DateTime
  status             RequestStatus @default(PENDING)
  clientId           Int
  freelancerId       Int
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  client             User          @relation("ClientRequests", fields: [clientId], references: [id])
  freelancer         User          @relation("FreelancerRequests", fields: [freelancerId], references: [id])
  milestones         Milestone[]
}
